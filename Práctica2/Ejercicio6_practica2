.global _start
_start:
                  movia sp, 0x007FFFFC /* inicializar pila */

                  movia r2, 0x10001000 /dirección base de JTAG UART/
                  movi r3, 0b1110
                  stwio r3, 8(r2)

                  movi r2, 0b010 /* habilitar interrupciones de el JTAG UART*/
                  wrctl ienable, r2

                  movi r2, 1 /* habilitamos interrupciones del procesador */
                  wrctl status, r2



                  IDLE: br IDLE /* el prog no hace nada más */
.section.exceptions, "ax"
global EXCEPTION_HANDLER
EXCEPTION_HANDLER:

                  subi sp,sp, 4 /*guardamos el registro et en pila*/
                  stw et, 0(sp)
                  rdctl et, ctl4 /* ¿existen interrupciones pendientes? */

                  beq et, r0, OTHER_EXCEPTIONS /* Si 0 => no es una interrupcion hardware */
                  subi ea, ea, 4 /* Es una int hardware => corregir rg ea */

                  subi sp, sp, 12 /* guardar registros en la pila */
                  stw ea, 0(sp)
                  stw ra, 4(sp)
                  stw r2, 8(sp)

                  andi r13, et, 0x100 /* int hardware tipo irq0? */
                  bne r13, r0, EXT_JTAG /* Sí => rutina de servicio para irq0 */

                  ldw ea, 0(sp)
                  ldw ra, 4(sp)
                  ldw r2, 8(sp)
                  ldw sp, sp, 12

OTHER_EXCEPTIONS:
                  ldw et, 0(sp)
                  addi sp,sp 4
                  eret
.global EXT_JTAG
EXT_JTAG:
                  subi sp, sp, 24 /* guardar regs en la pila */
                  stw ra, 0(sp)
                  stw r3, 4(sp)
                  stw r4, 8(sp)
                  stw r5, 12(sp)
                  stw r6, 16(sp)
                  stw r2, 20(sp)
                  movia r2, 0x10001000

                  ldwio r3, 0(r2)   /* leemos el registro RVALID*/

                  andi r4, r3, 0x8000
                  beq r4,r0,FIN
                  andi r5, r3, 0x00ff
                  call PUT_JTAG



FIN:              stwio r0, 0(r2)
                  ldw ra, 0(sp) /* recuperar regs de la pila */
                  ldw r3, 4(sp)
                  ldw r4, 8(sp)
                  ldw r5, 12(sp)
                  ldw r6, 16(sp)
                  ldw r2, 20(sp)
                  addi sp, sp, 24
                  ret

.global PUT_JTAG
PUT_JTAG:
                  subi sp,sp,4
                  stw r3, 0(sp)
                  ldwio r3,4(r2)
                  andhi r3, r3, 0xffff
                  beq r3, r0, END_PUT

                  addi r6, r0, 0x41 /* 65 */
                  blt r5,  r6 ,PRINT       /*si es mayor que 1ª minuscula seguimos*/
                  addi r6, r0, 0x5A /* 90 */
                  blt r6, r5 , MAYUS
                  addi r5, r5, 0x20 /* si le añadimos 32 pasa a mayúscula */
                  br PRINT

MAYUS:            addi r6, r0, 0x61 /* 97 */
                  blt r5,  r6 ,PRINT  /* si es menor a 97 no es mayúscula*/
                  addi r6, r0, 0x7A   /* 122 */
                  blt r6, r5, PRINT   /*si es mayor no es mayúscula*/
                  subi r5,r5, 0x20  /*restamos 32 para hacerla minúscula*/
                  


PRINT:            stwio r5, 0(r2)
END_PUT:          ldw r3, 0(sp)
                  addi sp, sp, 4
                  ret


.end
