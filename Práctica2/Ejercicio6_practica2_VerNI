*********************************************************************/
.text
.global _start
_start:

                movia sp, 0x007FFFFC /* inicializamos la pila */
                movia r6, 0x10001000 /* Dirección base de JTAG UART  */

                movia r8, TEXT_STRING

LOOP:
                ldb r5, 0(r8)
                beq r5, zero, GET_JTAG /* string is null-terminated */
                call PUT_JTAG
                addi r8, r8, 1
                br LOOP



GET_JTAG:
                ldwio r4, 0(r6) /* leemos el registro de datos de JTAG UART */
                andi r8, r4, 0x8000 /* comprobamos si hay nuevos datos*/
                beq r8, r0, GET_JTAG /* si no esperamos*/
                andi r5, r4, 0x00ff /*nueva informacióin en los bytes menos significativos */
                call PUT_JTAG
                br GET_JTAG


.global PUT_JTAG
PUT_JTAG:

                subi sp, sp, 4
                stw r4, 0(sp)       /*guardamos el registro en la pila*/
                ldwio r4, 4(r6) /*leemos su control de registro*/
                andhi r4, r4, 0xffff
                beq r4, r0, END_PUT /*si no hay espacio suficiente terminamos */

                addi r7, r0, 0x41 /* 65 */
                blt r5,  r7,PRINT       /*si es mayor que 1ª minuscula seguimos*/
                addi r7, r0, 0x5A /* 90 */
                blt r7, r5 , MAYUS
                addi r5, r5, 0x20 /* si le añadimos 32 pasa a mayúscula */
                br PRINT

MAYUS:
              addi r7, r0, 0x61 /* 97 */
              blt r5,  r7 ,PRINT  /* si es menor a 97 no es mayúscula*/
              addi r7, r0, 0x7A   /* 122 */
              blt r7, r5, PRINT   /*si es mayor no es mayúscula*/
              subi r5,r5, 0x20  /*restamos 32 para hacerla minúscula*/

END_PUT:

            ldw r4, 0(sp)
            addi sp, sp, 4   /*restauramos los registros*/
            ret


.data
.global TEXT_STRING
TEXT_STRING:
            .asciz "\nJTAG UART example code\nÈ "
.end
